{%- raw -%}
---
name: CI

on:
  workflow_call:
    inputs:
      deploy-docs:
        required: false
        type: boolean
        default: false
      release:
        required: false
        type: boolean
        default: false
      version:
        required: false
        type: string
    secrets:
      PYPI_API_TOKEN:
        required: false
      TEST_PYPI_API_TOKEN:
        required: false


jobs:
  get-changed-files:
    name: Get Changed Files
    uses: ./.github/workflows/get-changed-files.yml

  pre-commit:
    name: Pre-Commit
    uses: ./.github/workflows/pre-commit-action.yml
    needs:
      - get-changed-files
    with:
      changed-files: ${{ needs.get-changed-files.outputs.changed-files }}

  test:
    name: Test
    needs:
      - pre-commit
    uses: ./.github/workflows/test-action.yml

  docs:
    name: Docs
    needs:
      - pre-commit
    uses: ./.github/workflows/docs-action.yml

  check-prepare-release:
    name: Check if we can prepare release PR
    if: >-
      github.event_name == 'push' &&
      github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    needs:
      - docs
      - test
{%- endraw %}
    runs-on: ubuntu-{{ versions["ubuntu"] }}
{%- raw %}
    outputs:
      news-fragments-available: ${{ steps.check-available.outputs.available }}

    steps:
{%- endraw %}
      - uses: actions/checkout@{{ versions["actions/checkout"] }}
{%- raw %}

      - name: Check if news fragments are available
        id: check-available
        run: |
          if [ -n "$(find changelog -type f -not -name '.*' -print -quit)" ]; then
            echo "available=1" >> "$GITHUB_OUTPUT"
          else
            echo "available=0" >> "$GITHUB_OUTPUT"
          fi

  prepare-release:
    name: Prepare Release PR
    if: ${{ needs.check-prepare-release.outputs.news-fragments-available == '1' }}
    needs:
      - check-prepare-release
      - docs
      - test
    permissions:
      contents: write
      pull-requests: write
    uses: ./.github/workflows/prepare-release-action.yml

  deploy-docs:
    name: Deploy Docs
    uses: ./.github/workflows/deploy-docs-action.yml
    # Only build doc deployments from the default branch of the repo and never for PRs,
    # unless the triggering event was the release PR being merged.
    if: >-
      inputs.deploy-docs &&
      (
        github.event_name != 'pull_request' ||
        inputs.release
      ) &&
      github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
    needs:
      - docs
      - test

  build-python-package:
    name: Python Package
    if: ${{ inputs.release && success() }}
    uses: ./.github/workflows/package-action.yml
    needs:
      - pre-commit
    with:
      version: "${{ inputs.version }}"

  deploy-python-package-test-pypi:
    name: Deploy Python Package (Test PyPI)
    uses: ./.github/workflows/deploy-package-action.yml
    if: ${{ inputs.release && success() }}
    needs:
      - test
      - docs
      - build-python-package
    secrets:
      TEST_PYPI_API_TOKEN: "${{ secrets.TEST_PYPI_API_TOKEN }}"
    with:
      version: "${{ inputs.version }}"

  deploy-python-package:
    name: Deploy Python Package (PyPI)
    uses: ./.github/workflows/deploy-package-action.yml
    if: ${{ inputs.release && success() }}
    needs:
      - deploy-python-package-test-pypi
    secrets:
      PYPI_API_TOKEN: "${{ secrets.PYPI_API_TOKEN }}"
    with:
      test: false
      version: "${{ inputs.version }}"

  set-pipeline-exit-status:
    # This step is just so we can make github require this step, to pass checks
    # on a pull request instead of requiring all
    name: Set the CI Pipeline Exit Status
{%- endraw %}
    runs-on: ubuntu-{{ versions["ubuntu"] }}
{%- raw %}
    if: always()
    needs:
      - test
      - docs
      - deploy-docs
      - build-python-package
      - deploy-python-package-test-pypi
      - deploy-python-package

    steps:
      - name: Download Exit Status Files
        if: always()
{%- endraw %}
        uses: actions/download-artifact@{{ versions["actions/download-artifact"] }}
{%- raw %}
        with:
          path: exitstatus
          pattern: exitstatus-*
          merge-multiple: true

      - name: Delete Exit Status Artifacts
        if: always()
{%- endraw %}
        uses: geekyeggo/delete-artifact@{{ versions["geekyeggo/delete-artifact"] }}
{%- raw %}
        with:
          name: exitstatus-*
          useGlob: true
          failOnError: false

      - name: Set Pipeline Exit Status
        run: |
          tree exitstatus
          grep -RE 'failure|cancelled' exitstatus/ && exit 1 || exit 0

      - name: Done
        if: always()
        run:
          echo "All workflows finished"
{%- endraw %}
